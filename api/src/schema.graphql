# INPUTS
## Where

input LanguageWhereUniqueInput {
  id: ID
  iso: String
}

input LanguageWhereInput {
  id: ID
  name: String
  iso: String
  code: String
  projects_some: ProjectWhereInput
  users_some: UserWhereInput
  translations_some: TranslationWhereInput
}

input LiteralWhereUniqueInput {
  id: ID
}

input LiteralWhereInput {
  id: ID
  project: ProjectWhereInput
  translations_some: TranslationWhereInput
  literal: String
  as_in: String
}

input ProjectWhereUniqueInput {
  id: ID
  name: String
}

input ProjectWhereInput {
  id: ID
  name: String
  users_some: UserWhereInput
  languages_some: LanguageWhereInput
  translations_some: TranslationWhereInput
  literals_some: LiteralWhereInput
}

input TranslationWhereUniqueInput {
  id: ID
}

input TranslationWhereInput {
  id: ID
  language: LanguageWhereInput
  literal: LiteralWhereInput
  project: ProjectWhereInput
  translation: String
}

input UserWhereUniqueInput {
  id: ID
  name: String
}

input UserWhereInput {
  id: ID
  name: String
  admin: Boolean
  projects_some: ProjectWhereInput
  languages_some: LanguageWhereInput
}

## CREATE

input ProjectCreateInput {
  id: ID
  name: String!
  users: [UserWhereUniqueInput!]
  languages: [LanguageWhereUniqueInput!]
  translations: [TranslationWhereUniqueInput!]
  literals: [LiteralWhereUniqueInput!]
}

input TranslationCreateInput {
  id: ID
  language: LanguageWhereUniqueInput!
  literal: LiteralWhereInput!
  project: ProjectWhereUniqueInput!
  translation: String!
}

## UPDATE

input TranslationUpdateInput {
  translation: String
}

# TYPES
## QUERY

type Query {
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput): [Language]!
  literals(where: LiteralWhereInput): [Literal]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput): [Project]!
  translations(where: TranslationWhereInput): [Translation]!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput): [User]!
}

## MUTATION

type Mutation {
  addUserToProject(project: ProjectWhereUniqueInput!, user: UserWhereUniqueInput!): Project!
  createProject(data: ProjectCreateInput!): Project!
  createLiteralTranslation(data: TranslationCreateInput!): Translation!
  upsertTranslation(where: TranslationWhereUniqueInput!, create: TranslationCreateInput!, update: TranslationUpdateInput!): Translation!
}

## OBJECTS

type Language {
  id: ID!
  name: String!
  iso: String!
  code: String!
  projects: [Project!]
  users: [User!]
  translations: [Translation!]
}

type Literal {
  id: ID!
  project: Project!
  translations: [Translation!]
  literal: String!
  as_in: String!
}

type Project {
  id: ID!
  name: String!
  users: [User!]
  languages: [Language!]
  translations: [Translation!]
  literals: [Literal!]
}

type Translation {
  id: ID!
  language: Language!
  literal: Literal!
  project: Project!
  translation: String!
}

type User {
  id: ID!
  name: String!
  admin: Boolean!
  projects: [Project!]!
  languages: [Language!]!
}

# ENUM

enum MutationType {
  CREATED
  UPDATED
  DELETED
}