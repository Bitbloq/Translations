// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateLanguage {
  count: Int!
}

type AggregateLiteral {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateTranslation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Language {
  id: ID!
  name: String!
  iso: String!
  code: String!
  translations(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Translation!]
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: ID
  name: String!
  iso: String!
  code: String!
  translations: TranslationCreateManyWithoutLanguageInput
}

input LanguageCreateManyInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input LanguageCreateOneWithoutTranslationsInput {
  create: LanguageCreateWithoutTranslationsInput
  connect: LanguageWhereUniqueInput
}

input LanguageCreateWithoutTranslationsInput {
  id: ID
  name: String!
  iso: String!
  code: String!
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  iso_ASC
  iso_DESC
  code_ASC
  code_DESC
}

type LanguagePreviousValues {
  id: ID!
  name: String!
  iso: String!
  code: String!
}

input LanguageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  iso: String
  iso_not: String
  iso_in: [String!]
  iso_not_in: [String!]
  iso_lt: String
  iso_lte: String
  iso_gt: String
  iso_gte: String
  iso_contains: String
  iso_not_contains: String
  iso_starts_with: String
  iso_not_starts_with: String
  iso_ends_with: String
  iso_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  AND: [LanguageScalarWhereInput!]
  OR: [LanguageScalarWhereInput!]
  NOT: [LanguageScalarWhereInput!]
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

input LanguageUpdateDataInput {
  name: String
  iso: String
  code: String
  translations: TranslationUpdateManyWithoutLanguageInput
}

input LanguageUpdateInput {
  name: String
  iso: String
  code: String
  translations: TranslationUpdateManyWithoutLanguageInput
}

input LanguageUpdateManyDataInput {
  name: String
  iso: String
  code: String
}

input LanguageUpdateManyInput {
  create: [LanguageCreateInput!]
  update: [LanguageUpdateWithWhereUniqueNestedInput!]
  upsert: [LanguageUpsertWithWhereUniqueNestedInput!]
  delete: [LanguageWhereUniqueInput!]
  connect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  disconnect: [LanguageWhereUniqueInput!]
  deleteMany: [LanguageScalarWhereInput!]
  updateMany: [LanguageUpdateManyWithWhereNestedInput!]
}

input LanguageUpdateManyMutationInput {
  name: String
  iso: String
  code: String
}

input LanguageUpdateManyWithWhereNestedInput {
  where: LanguageScalarWhereInput!
  data: LanguageUpdateManyDataInput!
}

input LanguageUpdateOneRequiredWithoutTranslationsInput {
  create: LanguageCreateWithoutTranslationsInput
  update: LanguageUpdateWithoutTranslationsDataInput
  upsert: LanguageUpsertWithoutTranslationsInput
  connect: LanguageWhereUniqueInput
}

input LanguageUpdateWithoutTranslationsDataInput {
  name: String
  iso: String
  code: String
}

input LanguageUpdateWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateDataInput!
}

input LanguageUpsertWithoutTranslationsInput {
  update: LanguageUpdateWithoutTranslationsDataInput!
  create: LanguageCreateWithoutTranslationsInput!
}

input LanguageUpsertWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  iso: String
  iso_not: String
  iso_in: [String!]
  iso_not_in: [String!]
  iso_lt: String
  iso_lte: String
  iso_gt: String
  iso_gte: String
  iso_contains: String
  iso_not_contains: String
  iso_starts_with: String
  iso_not_starts_with: String
  iso_ends_with: String
  iso_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  translations_every: TranslationWhereInput
  translations_some: TranslationWhereInput
  translations_none: TranslationWhereInput
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

input LanguageWhereUniqueInput {
  id: ID
  iso: String
}

type Literal {
  id: ID!
  project: Project!
  translations(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Translation!]
  literal: String!
  as_in: String!
}

type LiteralConnection {
  pageInfo: PageInfo!
  edges: [LiteralEdge]!
  aggregate: AggregateLiteral!
}

input LiteralCreateInput {
  id: ID
  project: ProjectCreateOneWithoutLiteralsInput!
  translations: TranslationCreateManyWithoutLiteralInput
  literal: String!
  as_in: String!
}

input LiteralCreateManyWithoutProjectInput {
  create: [LiteralCreateWithoutProjectInput!]
  connect: [LiteralWhereUniqueInput!]
}

input LiteralCreateOneWithoutTranslationsInput {
  create: LiteralCreateWithoutTranslationsInput
  connect: LiteralWhereUniqueInput
}

input LiteralCreateWithoutProjectInput {
  id: ID
  translations: TranslationCreateManyWithoutLiteralInput
  literal: String!
  as_in: String!
}

input LiteralCreateWithoutTranslationsInput {
  id: ID
  project: ProjectCreateOneWithoutLiteralsInput!
  literal: String!
  as_in: String!
}

type LiteralEdge {
  node: Literal!
  cursor: String!
}

enum LiteralOrderByInput {
  id_ASC
  id_DESC
  literal_ASC
  literal_DESC
  as_in_ASC
  as_in_DESC
}

type LiteralPreviousValues {
  id: ID!
  literal: String!
  as_in: String!
}

input LiteralScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  literal: String
  literal_not: String
  literal_in: [String!]
  literal_not_in: [String!]
  literal_lt: String
  literal_lte: String
  literal_gt: String
  literal_gte: String
  literal_contains: String
  literal_not_contains: String
  literal_starts_with: String
  literal_not_starts_with: String
  literal_ends_with: String
  literal_not_ends_with: String
  as_in: String
  as_in_not: String
  as_in_in: [String!]
  as_in_not_in: [String!]
  as_in_lt: String
  as_in_lte: String
  as_in_gt: String
  as_in_gte: String
  as_in_contains: String
  as_in_not_contains: String
  as_in_starts_with: String
  as_in_not_starts_with: String
  as_in_ends_with: String
  as_in_not_ends_with: String
  AND: [LiteralScalarWhereInput!]
  OR: [LiteralScalarWhereInput!]
  NOT: [LiteralScalarWhereInput!]
}

type LiteralSubscriptionPayload {
  mutation: MutationType!
  node: Literal
  updatedFields: [String!]
  previousValues: LiteralPreviousValues
}

input LiteralSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LiteralWhereInput
  AND: [LiteralSubscriptionWhereInput!]
  OR: [LiteralSubscriptionWhereInput!]
  NOT: [LiteralSubscriptionWhereInput!]
}

input LiteralUpdateInput {
  project: ProjectUpdateOneRequiredWithoutLiteralsInput
  translations: TranslationUpdateManyWithoutLiteralInput
  literal: String
  as_in: String
}

input LiteralUpdateManyDataInput {
  literal: String
  as_in: String
}

input LiteralUpdateManyMutationInput {
  literal: String
  as_in: String
}

input LiteralUpdateManyWithoutProjectInput {
  create: [LiteralCreateWithoutProjectInput!]
  delete: [LiteralWhereUniqueInput!]
  connect: [LiteralWhereUniqueInput!]
  set: [LiteralWhereUniqueInput!]
  disconnect: [LiteralWhereUniqueInput!]
  update: [LiteralUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [LiteralUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [LiteralScalarWhereInput!]
  updateMany: [LiteralUpdateManyWithWhereNestedInput!]
}

input LiteralUpdateManyWithWhereNestedInput {
  where: LiteralScalarWhereInput!
  data: LiteralUpdateManyDataInput!
}

input LiteralUpdateOneRequiredWithoutTranslationsInput {
  create: LiteralCreateWithoutTranslationsInput
  update: LiteralUpdateWithoutTranslationsDataInput
  upsert: LiteralUpsertWithoutTranslationsInput
  connect: LiteralWhereUniqueInput
}

input LiteralUpdateWithoutProjectDataInput {
  translations: TranslationUpdateManyWithoutLiteralInput
  literal: String
  as_in: String
}

input LiteralUpdateWithoutTranslationsDataInput {
  project: ProjectUpdateOneRequiredWithoutLiteralsInput
  literal: String
  as_in: String
}

input LiteralUpdateWithWhereUniqueWithoutProjectInput {
  where: LiteralWhereUniqueInput!
  data: LiteralUpdateWithoutProjectDataInput!
}

input LiteralUpsertWithoutTranslationsInput {
  update: LiteralUpdateWithoutTranslationsDataInput!
  create: LiteralCreateWithoutTranslationsInput!
}

input LiteralUpsertWithWhereUniqueWithoutProjectInput {
  where: LiteralWhereUniqueInput!
  update: LiteralUpdateWithoutProjectDataInput!
  create: LiteralCreateWithoutProjectInput!
}

input LiteralWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project: ProjectWhereInput
  translations_every: TranslationWhereInput
  translations_some: TranslationWhereInput
  translations_none: TranslationWhereInput
  literal: String
  literal_not: String
  literal_in: [String!]
  literal_not_in: [String!]
  literal_lt: String
  literal_lte: String
  literal_gt: String
  literal_gte: String
  literal_contains: String
  literal_not_contains: String
  literal_starts_with: String
  literal_not_starts_with: String
  literal_ends_with: String
  literal_not_ends_with: String
  as_in: String
  as_in_not: String
  as_in_in: [String!]
  as_in_not_in: [String!]
  as_in_lt: String
  as_in_lte: String
  as_in_gt: String
  as_in_gte: String
  as_in_contains: String
  as_in_not_contains: String
  as_in_starts_with: String
  as_in_not_starts_with: String
  as_in_ends_with: String
  as_in_not_ends_with: String
  AND: [LiteralWhereInput!]
  OR: [LiteralWhereInput!]
  NOT: [LiteralWhereInput!]
}

input LiteralWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLanguage(data: LanguageCreateInput!): Language!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createLiteral(data: LiteralCreateInput!): Literal!
  updateLiteral(data: LiteralUpdateInput!, where: LiteralWhereUniqueInput!): Literal
  updateManyLiterals(data: LiteralUpdateManyMutationInput!, where: LiteralWhereInput): BatchPayload!
  upsertLiteral(where: LiteralWhereUniqueInput!, create: LiteralCreateInput!, update: LiteralUpdateInput!): Literal!
  deleteLiteral(where: LiteralWhereUniqueInput!): Literal
  deleteManyLiterals(where: LiteralWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createTranslation(data: TranslationCreateInput!): Translation!
  updateTranslation(data: TranslationUpdateInput!, where: TranslationWhereUniqueInput!): Translation
  updateManyTranslations(data: TranslationUpdateManyMutationInput!, where: TranslationWhereInput): BatchPayload!
  upsertTranslation(where: TranslationWhereUniqueInput!, create: TranslationCreateInput!, update: TranslationUpdateInput!): Translation!
  deleteTranslation(where: TranslationWhereUniqueInput!): Translation
  deleteManyTranslations(where: TranslationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  name: String!
  git_repo: String!
  git_name: String!
  git_branch: String!
  git_path: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  translations(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Translation!]
  literals(where: LiteralWhereInput, orderBy: LiteralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Literal!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  name: String!
  git_repo: String!
  git_name: String!
  git_branch: String!
  git_path: String!
  users: UserCreateManyWithoutProjectsInput
  languages: LanguageCreateManyInput
  translations: TranslationCreateManyWithoutProjectInput
  literals: LiteralCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutUsersInput {
  create: [ProjectCreateWithoutUsersInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutLiteralsInput {
  create: ProjectCreateWithoutLiteralsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutTranslationsInput {
  create: ProjectCreateWithoutTranslationsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutLiteralsInput {
  id: ID
  name: String!
  git_repo: String!
  git_name: String!
  git_branch: String!
  git_path: String!
  users: UserCreateManyWithoutProjectsInput
  languages: LanguageCreateManyInput
  translations: TranslationCreateManyWithoutProjectInput
}

input ProjectCreateWithoutTranslationsInput {
  id: ID
  name: String!
  git_repo: String!
  git_name: String!
  git_branch: String!
  git_path: String!
  users: UserCreateManyWithoutProjectsInput
  languages: LanguageCreateManyInput
  literals: LiteralCreateManyWithoutProjectInput
}

input ProjectCreateWithoutUsersInput {
  id: ID
  name: String!
  git_repo: String!
  git_name: String!
  git_branch: String!
  git_path: String!
  languages: LanguageCreateManyInput
  translations: TranslationCreateManyWithoutProjectInput
  literals: LiteralCreateManyWithoutProjectInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  git_repo_ASC
  git_repo_DESC
  git_name_ASC
  git_name_DESC
  git_branch_ASC
  git_branch_DESC
  git_path_ASC
  git_path_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  git_repo: String!
  git_name: String!
  git_branch: String!
  git_path: String!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  git_repo: String
  git_repo_not: String
  git_repo_in: [String!]
  git_repo_not_in: [String!]
  git_repo_lt: String
  git_repo_lte: String
  git_repo_gt: String
  git_repo_gte: String
  git_repo_contains: String
  git_repo_not_contains: String
  git_repo_starts_with: String
  git_repo_not_starts_with: String
  git_repo_ends_with: String
  git_repo_not_ends_with: String
  git_name: String
  git_name_not: String
  git_name_in: [String!]
  git_name_not_in: [String!]
  git_name_lt: String
  git_name_lte: String
  git_name_gt: String
  git_name_gte: String
  git_name_contains: String
  git_name_not_contains: String
  git_name_starts_with: String
  git_name_not_starts_with: String
  git_name_ends_with: String
  git_name_not_ends_with: String
  git_branch: String
  git_branch_not: String
  git_branch_in: [String!]
  git_branch_not_in: [String!]
  git_branch_lt: String
  git_branch_lte: String
  git_branch_gt: String
  git_branch_gte: String
  git_branch_contains: String
  git_branch_not_contains: String
  git_branch_starts_with: String
  git_branch_not_starts_with: String
  git_branch_ends_with: String
  git_branch_not_ends_with: String
  git_path: String
  git_path_not: String
  git_path_in: [String!]
  git_path_not_in: [String!]
  git_path_lt: String
  git_path_lte: String
  git_path_gt: String
  git_path_gte: String
  git_path_contains: String
  git_path_not_contains: String
  git_path_starts_with: String
  git_path_not_starts_with: String
  git_path_ends_with: String
  git_path_not_ends_with: String
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
  git_repo: String
  git_name: String
  git_branch: String
  git_path: String
  users: UserUpdateManyWithoutProjectsInput
  languages: LanguageUpdateManyInput
  translations: TranslationUpdateManyWithoutProjectInput
  literals: LiteralUpdateManyWithoutProjectInput
}

input ProjectUpdateManyDataInput {
  name: String
  git_repo: String
  git_name: String
  git_branch: String
  git_path: String
}

input ProjectUpdateManyMutationInput {
  name: String
  git_repo: String
  git_name: String
  git_branch: String
  git_path: String
}

input ProjectUpdateManyWithoutUsersInput {
  create: [ProjectCreateWithoutUsersInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredWithoutLiteralsInput {
  create: ProjectCreateWithoutLiteralsInput
  update: ProjectUpdateWithoutLiteralsDataInput
  upsert: ProjectUpsertWithoutLiteralsInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneRequiredWithoutTranslationsInput {
  create: ProjectCreateWithoutTranslationsInput
  update: ProjectUpdateWithoutTranslationsDataInput
  upsert: ProjectUpsertWithoutTranslationsInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutLiteralsDataInput {
  name: String
  git_repo: String
  git_name: String
  git_branch: String
  git_path: String
  users: UserUpdateManyWithoutProjectsInput
  languages: LanguageUpdateManyInput
  translations: TranslationUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutTranslationsDataInput {
  name: String
  git_repo: String
  git_name: String
  git_branch: String
  git_path: String
  users: UserUpdateManyWithoutProjectsInput
  languages: LanguageUpdateManyInput
  literals: LiteralUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutUsersDataInput {
  name: String
  git_repo: String
  git_name: String
  git_branch: String
  git_path: String
  languages: LanguageUpdateManyInput
  translations: TranslationUpdateManyWithoutProjectInput
  literals: LiteralUpdateManyWithoutProjectInput
}

input ProjectUpdateWithWhereUniqueWithoutUsersInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutUsersDataInput!
}

input ProjectUpsertWithoutLiteralsInput {
  update: ProjectUpdateWithoutLiteralsDataInput!
  create: ProjectCreateWithoutLiteralsInput!
}

input ProjectUpsertWithoutTranslationsInput {
  update: ProjectUpdateWithoutTranslationsDataInput!
  create: ProjectCreateWithoutTranslationsInput!
}

input ProjectUpsertWithWhereUniqueWithoutUsersInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutUsersDataInput!
  create: ProjectCreateWithoutUsersInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  git_repo: String
  git_repo_not: String
  git_repo_in: [String!]
  git_repo_not_in: [String!]
  git_repo_lt: String
  git_repo_lte: String
  git_repo_gt: String
  git_repo_gte: String
  git_repo_contains: String
  git_repo_not_contains: String
  git_repo_starts_with: String
  git_repo_not_starts_with: String
  git_repo_ends_with: String
  git_repo_not_ends_with: String
  git_name: String
  git_name_not: String
  git_name_in: [String!]
  git_name_not_in: [String!]
  git_name_lt: String
  git_name_lte: String
  git_name_gt: String
  git_name_gte: String
  git_name_contains: String
  git_name_not_contains: String
  git_name_starts_with: String
  git_name_not_starts_with: String
  git_name_ends_with: String
  git_name_not_ends_with: String
  git_branch: String
  git_branch_not: String
  git_branch_in: [String!]
  git_branch_not_in: [String!]
  git_branch_lt: String
  git_branch_lte: String
  git_branch_gt: String
  git_branch_gte: String
  git_branch_contains: String
  git_branch_not_contains: String
  git_branch_starts_with: String
  git_branch_not_starts_with: String
  git_branch_ends_with: String
  git_branch_not_ends_with: String
  git_path: String
  git_path_not: String
  git_path_in: [String!]
  git_path_not_in: [String!]
  git_path_lt: String
  git_path_lte: String
  git_path_gt: String
  git_path_gte: String
  git_path_contains: String
  git_path_not_contains: String
  git_path_starts_with: String
  git_path_not_starts_with: String
  git_path_ends_with: String
  git_path_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  translations_every: TranslationWhereInput
  translations_some: TranslationWhereInput
  translations_none: TranslationWhereInput
  literals_every: LiteralWhereInput
  literals_some: LiteralWhereInput
  literals_none: LiteralWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
  name: String
}

type Query {
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  literal(where: LiteralWhereUniqueInput!): Literal
  literals(where: LiteralWhereInput, orderBy: LiteralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Literal]!
  literalsConnection(where: LiteralWhereInput, orderBy: LiteralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LiteralConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  translation(where: TranslationWhereUniqueInput!): Translation
  translations(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Translation]!
  translationsConnection(where: TranslationWhereInput, orderBy: TranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TranslationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  literal(where: LiteralSubscriptionWhereInput): LiteralSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  translation(where: TranslationSubscriptionWhereInput): TranslationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Translation {
  id: ID!
  language: Language!
  literal: Literal!
  project: Project!
  translation: String!
}

type TranslationConnection {
  pageInfo: PageInfo!
  edges: [TranslationEdge]!
  aggregate: AggregateTranslation!
}

input TranslationCreateInput {
  id: ID
  language: LanguageCreateOneWithoutTranslationsInput!
  literal: LiteralCreateOneWithoutTranslationsInput!
  project: ProjectCreateOneWithoutTranslationsInput!
  translation: String!
}

input TranslationCreateManyWithoutLanguageInput {
  create: [TranslationCreateWithoutLanguageInput!]
  connect: [TranslationWhereUniqueInput!]
}

input TranslationCreateManyWithoutLiteralInput {
  create: [TranslationCreateWithoutLiteralInput!]
  connect: [TranslationWhereUniqueInput!]
}

input TranslationCreateManyWithoutProjectInput {
  create: [TranslationCreateWithoutProjectInput!]
  connect: [TranslationWhereUniqueInput!]
}

input TranslationCreateWithoutLanguageInput {
  id: ID
  literal: LiteralCreateOneWithoutTranslationsInput!
  project: ProjectCreateOneWithoutTranslationsInput!
  translation: String!
}

input TranslationCreateWithoutLiteralInput {
  id: ID
  language: LanguageCreateOneWithoutTranslationsInput!
  project: ProjectCreateOneWithoutTranslationsInput!
  translation: String!
}

input TranslationCreateWithoutProjectInput {
  id: ID
  language: LanguageCreateOneWithoutTranslationsInput!
  literal: LiteralCreateOneWithoutTranslationsInput!
  translation: String!
}

type TranslationEdge {
  node: Translation!
  cursor: String!
}

enum TranslationOrderByInput {
  id_ASC
  id_DESC
  translation_ASC
  translation_DESC
}

type TranslationPreviousValues {
  id: ID!
  translation: String!
}

input TranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  translation: String
  translation_not: String
  translation_in: [String!]
  translation_not_in: [String!]
  translation_lt: String
  translation_lte: String
  translation_gt: String
  translation_gte: String
  translation_contains: String
  translation_not_contains: String
  translation_starts_with: String
  translation_not_starts_with: String
  translation_ends_with: String
  translation_not_ends_with: String
  AND: [TranslationScalarWhereInput!]
  OR: [TranslationScalarWhereInput!]
  NOT: [TranslationScalarWhereInput!]
}

type TranslationSubscriptionPayload {
  mutation: MutationType!
  node: Translation
  updatedFields: [String!]
  previousValues: TranslationPreviousValues
}

input TranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TranslationWhereInput
  AND: [TranslationSubscriptionWhereInput!]
  OR: [TranslationSubscriptionWhereInput!]
  NOT: [TranslationSubscriptionWhereInput!]
}

input TranslationUpdateInput {
  language: LanguageUpdateOneRequiredWithoutTranslationsInput
  literal: LiteralUpdateOneRequiredWithoutTranslationsInput
  project: ProjectUpdateOneRequiredWithoutTranslationsInput
  translation: String
}

input TranslationUpdateManyDataInput {
  translation: String
}

input TranslationUpdateManyMutationInput {
  translation: String
}

input TranslationUpdateManyWithoutLanguageInput {
  create: [TranslationCreateWithoutLanguageInput!]
  delete: [TranslationWhereUniqueInput!]
  connect: [TranslationWhereUniqueInput!]
  set: [TranslationWhereUniqueInput!]
  disconnect: [TranslationWhereUniqueInput!]
  update: [TranslationUpdateWithWhereUniqueWithoutLanguageInput!]
  upsert: [TranslationUpsertWithWhereUniqueWithoutLanguageInput!]
  deleteMany: [TranslationScalarWhereInput!]
  updateMany: [TranslationUpdateManyWithWhereNestedInput!]
}

input TranslationUpdateManyWithoutLiteralInput {
  create: [TranslationCreateWithoutLiteralInput!]
  delete: [TranslationWhereUniqueInput!]
  connect: [TranslationWhereUniqueInput!]
  set: [TranslationWhereUniqueInput!]
  disconnect: [TranslationWhereUniqueInput!]
  update: [TranslationUpdateWithWhereUniqueWithoutLiteralInput!]
  upsert: [TranslationUpsertWithWhereUniqueWithoutLiteralInput!]
  deleteMany: [TranslationScalarWhereInput!]
  updateMany: [TranslationUpdateManyWithWhereNestedInput!]
}

input TranslationUpdateManyWithoutProjectInput {
  create: [TranslationCreateWithoutProjectInput!]
  delete: [TranslationWhereUniqueInput!]
  connect: [TranslationWhereUniqueInput!]
  set: [TranslationWhereUniqueInput!]
  disconnect: [TranslationWhereUniqueInput!]
  update: [TranslationUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [TranslationUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [TranslationScalarWhereInput!]
  updateMany: [TranslationUpdateManyWithWhereNestedInput!]
}

input TranslationUpdateManyWithWhereNestedInput {
  where: TranslationScalarWhereInput!
  data: TranslationUpdateManyDataInput!
}

input TranslationUpdateWithoutLanguageDataInput {
  literal: LiteralUpdateOneRequiredWithoutTranslationsInput
  project: ProjectUpdateOneRequiredWithoutTranslationsInput
  translation: String
}

input TranslationUpdateWithoutLiteralDataInput {
  language: LanguageUpdateOneRequiredWithoutTranslationsInput
  project: ProjectUpdateOneRequiredWithoutTranslationsInput
  translation: String
}

input TranslationUpdateWithoutProjectDataInput {
  language: LanguageUpdateOneRequiredWithoutTranslationsInput
  literal: LiteralUpdateOneRequiredWithoutTranslationsInput
  translation: String
}

input TranslationUpdateWithWhereUniqueWithoutLanguageInput {
  where: TranslationWhereUniqueInput!
  data: TranslationUpdateWithoutLanguageDataInput!
}

input TranslationUpdateWithWhereUniqueWithoutLiteralInput {
  where: TranslationWhereUniqueInput!
  data: TranslationUpdateWithoutLiteralDataInput!
}

input TranslationUpdateWithWhereUniqueWithoutProjectInput {
  where: TranslationWhereUniqueInput!
  data: TranslationUpdateWithoutProjectDataInput!
}

input TranslationUpsertWithWhereUniqueWithoutLanguageInput {
  where: TranslationWhereUniqueInput!
  update: TranslationUpdateWithoutLanguageDataInput!
  create: TranslationCreateWithoutLanguageInput!
}

input TranslationUpsertWithWhereUniqueWithoutLiteralInput {
  where: TranslationWhereUniqueInput!
  update: TranslationUpdateWithoutLiteralDataInput!
  create: TranslationCreateWithoutLiteralInput!
}

input TranslationUpsertWithWhereUniqueWithoutProjectInput {
  where: TranslationWhereUniqueInput!
  update: TranslationUpdateWithoutProjectDataInput!
  create: TranslationCreateWithoutProjectInput!
}

input TranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  language: LanguageWhereInput
  literal: LiteralWhereInput
  project: ProjectWhereInput
  translation: String
  translation_not: String
  translation_in: [String!]
  translation_not_in: [String!]
  translation_lt: String
  translation_lte: String
  translation_gt: String
  translation_gte: String
  translation_contains: String
  translation_not_contains: String
  translation_starts_with: String
  translation_not_starts_with: String
  translation_ends_with: String
  translation_not_ends_with: String
  AND: [TranslationWhereInput!]
  OR: [TranslationWhereInput!]
  NOT: [TranslationWhereInput!]
}

input TranslationWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  admin: Boolean!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  admin: Boolean
  projects: ProjectCreateManyWithoutUsersInput
  languages: LanguageCreateManyInput
}

input UserCreateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutProjectsInput {
  id: ID
  name: String!
  admin: Boolean
  languages: LanguageCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  admin_ASC
  admin_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  admin: Boolean!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  admin: Boolean
  projects: ProjectUpdateManyWithoutUsersInput
  languages: LanguageUpdateManyInput
}

input UserUpdateManyDataInput {
  name: String
  admin: Boolean
}

input UserUpdateManyMutationInput {
  name: String
  admin: Boolean
}

input UserUpdateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutProjectsDataInput {
  name: String
  admin: Boolean
  languages: LanguageUpdateManyInput
}

input UserUpdateWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsDataInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`